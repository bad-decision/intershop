/*
 * Payment Service API
 * Reactive RESTful API for payment operations
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.azmeev.intershop.payment.web.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.Valid;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotNull;

import java.math.BigDecimal;
import java.util.Objects;

/**
 * PaymentRequest
 */
@JsonPropertyOrder({
        PaymentRequest.JSON_PROPERTY_AMOUNT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-16T11:53:58.024048100+03:00[Europe/Moscow]", comments = "Generator version: 7.12.0")
public class PaymentRequest {
    public static final String JSON_PROPERTY_AMOUNT = "amount";
    @jakarta.annotation.Nonnull
    private BigDecimal amount;

    public static final String JSON_PROPERTY_USER_ID = "userId";
    @jakarta.annotation.Nonnull
    private Long userId;

    public PaymentRequest() {
    }

    public PaymentRequest amount(@jakarta.annotation.Nonnull BigDecimal amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Order amount to deduct from balance
     * minimum: 0.01
     *
     * @return amount
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    @DecimalMin("0.01")
    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public BigDecimal getAmount() {
        return amount;
    }


    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAmount(@jakarta.annotation.Nonnull BigDecimal amount) {
        this.amount = amount;
    }


    public PaymentRequest userId(@jakarta.annotation.Nonnull Long userId) {

        this.userId = userId;
        return this;
    }

    /**
     * User ID making the payment
     * @return userId
     */
    @jakarta.annotation.Nonnull
    @NotNull

    @JsonProperty(JSON_PROPERTY_USER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Long getUserId() {
        return userId;
    }

    @JsonProperty(JSON_PROPERTY_USER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUserId(@jakarta.annotation.Nonnull Long userId) {
        this.userId = userId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentRequest paymentRequest = (PaymentRequest) o;
        return Objects.equals(this.amount, paymentRequest.amount) &&
                Objects.equals(this.userId, paymentRequest.userId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(amount, userId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PaymentRequest {\n");
        sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

